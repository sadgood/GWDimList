//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\vc_program\digital\GWDimList\application\GWLinkPart.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 8.5
//              Date: 09-28-2014  (Format: mm-dd-yyyy)
//              Time: 10:11
//
//==============================================================================

#ifndef GWLINKPART_H_INCLUDED
#define GWLINKPART_H_INCLUDED

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <uf_ui_types.h>
#include <iostream>
#include <NXOpen/Session.hxx>
#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXException.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>
#include <NXOpen/BlockStyler_Group.hxx>
#include <NXOpen/BlockStyler_SelectPartFromList.hxx>
#include <NXOpen/BlockStyler_SelectObject.hxx>
 
#include "GWDimFunc.hpp"

//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesEnabled
//------------------------------------------------------------------------------
#define GW_START_DIMENSION_ICON			3
#define GW_SURFACE_FINISH_ICON			(GW_START_DIMENSION_ICON + UF_dim_chamfer_subtype + 1)
#define GW_GDT_SYMBOL_ICON				(GW_SURFACE_FINISH_ICON + 1)

#define              SnapPointTypesEnabled_UserDefined (1 << 0);
#define                 SnapPointTypesEnabled_Inferred (1 << 1);
#define           SnapPointTypesEnabled_ScreenPosition (1 << 2);
#define                 SnapPointTypesEnabled_EndPoint (1 << 3);
#define                 SnapPointTypesEnabled_MidPoint (1 << 4);
#define             SnapPointTypesEnabled_ControlPoint (1 << 5);
#define             SnapPointTypesEnabled_Intersection (1 << 6);
#define                SnapPointTypesEnabled_ArcCenter (1 << 7);
#define            SnapPointTypesEnabled_QuadrantPoint (1 << 8);
#define            SnapPointTypesEnabled_ExistingPoint (1 << 9);
#define             SnapPointTypesEnabled_PointonCurve (1 <<10);
#define           SnapPointTypesEnabled_PointonSurface (1 <<11);
#define         SnapPointTypesEnabled_PointConstructor (1 <<12);
#define     SnapPointTypesEnabled_TwocurveIntersection (1 <<13);
#define             SnapPointTypesEnabled_TangentPoint (1 <<14);
#define                    SnapPointTypesEnabled_Poles (1 <<15);
#define         SnapPointTypesEnabled_BoundedGridPoint (1 <<16);
//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesOnByDefault
//------------------------------------------------------------------------------
#define             SnapPointTypesOnByDefault_EndPoint (1 << 3);
#define             SnapPointTypesOnByDefault_MidPoint (1 << 4);
#define         SnapPointTypesOnByDefault_ControlPoint (1 << 5);
#define         SnapPointTypesOnByDefault_Intersection (1 << 6);
#define            SnapPointTypesOnByDefault_ArcCenter (1 << 7);
#define        SnapPointTypesOnByDefault_QuadrantPoint (1 << 8);
#define        SnapPointTypesOnByDefault_ExistingPoint (1 << 9);
#define         SnapPointTypesOnByDefault_PointonCurve (1 <<10);
#define       SnapPointTypesOnByDefault_PointonSurface (1 <<11);
#define     SnapPointTypesOnByDefault_PointConstructor (1 <<12);
#define     SnapPointTypesOnByDefault_BoundedGridPoint (1 <<16);

typedef struct tagITEMDATA
{
	Annotations::Annotation *pmiAnnotation;
	BlockStyler::Node *pmiNode;
	
	std::vector<NXOpen::NXString> attributeTitles;
	std::vector<NXOpen::NXString> attributeValues;
	bool isUnlockText;
	bool isBreakPart;
} ITEMDATA, *PITEMDATA;

typedef struct tagCOLUMNDATA
{
	NXOpen::NXString	columnTitle;
	int					columnWidth;
	NXOpen::NXString	columnDefaults;
} COLUMNDATA, *PCOLUMNDATA;

//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

class DllExport GWLinkPart
{
    // class members
public:
    static Session *theSession;
    static UI *theUI;
 
    GWLinkPart();
    static void Show_GWLinkPart();
    ~GWLinkPart();
	static std::vector<ITEMDATA> itemDataVector;
	NXString GWLinkPart::AskPmiTreeName(Annotations::Annotation *pmiAnnotation);
    int Show();
    void RegisterWithMenu();
	void InitializePmiTreeList();
	static void InitializePmiAnnotationVector();
	static std::vector<COLUMNDATA> colunmDataVector;
	static bool GWLinkPart::InitializeColumnDatas();
	Annotations::Annotation* GetPmiAnnotation(const BlockStyler::Node *pmiNode);
    //----------------------- BlockStyler Callback Prototypes ---------------------
    // The following member function prototypes define the callbacks 
    // specified in your BlockStyler dialog.  The empty implementation
    // of these prototypes is provided in the GWLinkPart.cpp file. 
    // You are REQUIRED to write the implementation for these functions.
    //------------------------------------------------------------------------------
    void initialize_cb();
    void dialogShown_cb();
    int apply_cb();
    int ok_cb();
    int cancel_cb();
    int update_cb(NXOpen::BlockStyler::UIBlock* block);
    int filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject);
    PropertyList* GetBlockProperties(const char *blockID);
	BlockStyler::Node* GetPmiNode(const Annotations::Annotation *pmiAnnotation);
	static std::string strListConfig;
	static std::string strDialogConfig;
	void OnSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *, int columnID, bool selected);
	NXString StateIconNameCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state);
	static std::vector<Annotations::Annotation *> pmiAnnotationVector;
	void InsertViewNode(NXOpen::ModelingView *modelingView);
	void AddPmiToViewNode(BlockStyler::Node *viewNode, Annotations::Annotation *pmiAnnotation);
private:
    const char* theDlxFileName;
    NXOpen::BlockStyler::BlockDialog* theDialog;
    NXOpen::BlockStyler::Group* groupPart;// Block type: Group
    NXOpen::BlockStyler::SelectPartFromList* selectPart;// Block type: Select Part
    NXOpen::BlockStyler::Group* groupPmi;// Block type: Group
    NXOpen::BlockStyler::SelectObject* selectPmi;// Block type: Selection
	NXOpen::BlockStyler::Tree* pmiTree;// Block type: Tree Control
	void LinkPartToPmi();
	bool SetListColumnDatas(Part *part, Annotations::Annotation *pmiAnnotation, const char *list_config);
	bool IsEqualPmiText(Part *part, Annotations::Annotation *pmiAnnotation, const char *list_config, const char *dialog_config);
};
#endif //GWLINKPART_H_INCLUDED
