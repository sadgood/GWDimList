//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\vc_program\digital\GWDimList\application\GWDimList.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 8.5
//              Date: 08-02-2014  (Format: mm-dd-yyyy)
//              Time: 00:29
//
//==============================================================================

#ifndef GWDIMLIST_H_INCLUDED
#define GWDIMLIST_H_INCLUDED

#pragma warning(disable: 4251)
#pragma warning(disable: 4996)

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "GWDimFunc.hpp"

#define GW_START_DIMENSION_ICON			3
#define GW_SURFACE_FINISH_ICON			(GW_START_DIMENSION_ICON + UF_dim_chamfer_subtype + 1)
#define GW_GDT_SYMBOL_ICON				(GW_SURFACE_FINISH_ICON + 1)

typedef struct tagCOLUMNDATA
{
	NXOpen::NXString	columnTitle;
	int					columnWidth;
	NXOpen::NXString	columnDefaults;
} COLUMNDATA, *PCOLUMNDATA;

typedef struct tagITEMDATA
{
	Annotations::Annotation *pmiAnnotation;
	BlockStyler::Node *pmiNode;
	std::vector<NXOpen::NXString> attributeTitles;
	std::vector<NXOpen::NXString> attributeValues;
	bool isUnlockText;
	bool isBreakPart;
} ITEMDATA, *PITEMDATA;

//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesEnabled
//------------------------------------------------------------------------------
#define              SnapPointTypesEnabled_UserDefined (1 << 0);
#define                 SnapPointTypesEnabled_Inferred (1 << 1);
#define           SnapPointTypesEnabled_ScreenPosition (1 << 2);
#define                 SnapPointTypesEnabled_EndPoint (1 << 3);
#define                 SnapPointTypesEnabled_MidPoint (1 << 4);
#define             SnapPointTypesEnabled_ControlPoint (1 << 5);
#define             SnapPointTypesEnabled_Intersection (1 << 6);
#define                SnapPointTypesEnabled_ArcCenter (1 << 7);
#define            SnapPointTypesEnabled_QuadrantPoint (1 << 8);
#define            SnapPointTypesEnabled_ExistingPoint (1 << 9);
#define             SnapPointTypesEnabled_PointonCurve (1 <<10);
#define           SnapPointTypesEnabled_PointonSurface (1 <<11);
#define         SnapPointTypesEnabled_PointConstructor (1 <<12);
#define     SnapPointTypesEnabled_TwocurveIntersection (1 <<13);
#define             SnapPointTypesEnabled_TangentPoint (1 <<14);
#define                    SnapPointTypesEnabled_Poles (1 <<15);
#define         SnapPointTypesEnabled_BoundedGridPoint (1 <<16);
//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesOnByDefault
//------------------------------------------------------------------------------
#define             SnapPointTypesOnByDefault_EndPoint (1 << 3);
#define             SnapPointTypesOnByDefault_MidPoint (1 << 4);
#define         SnapPointTypesOnByDefault_ControlPoint (1 << 5);
#define         SnapPointTypesOnByDefault_Intersection (1 << 6);
#define            SnapPointTypesOnByDefault_ArcCenter (1 << 7);
#define        SnapPointTypesOnByDefault_QuadrantPoint (1 << 8);
#define        SnapPointTypesOnByDefault_ExistingPoint (1 << 9);
#define         SnapPointTypesOnByDefault_PointonCurve (1 <<10);
#define       SnapPointTypesOnByDefault_PointonSurface (1 <<11);
#define     SnapPointTypesOnByDefault_PointConstructor (1 <<12);
#define     SnapPointTypesOnByDefault_BoundedGridPoint (1 <<16);
//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

class DllExport GWDimList
{
	// class members
public:
	static Session *theSession;
	static UI *theUI;
	GWDimList();
	static void Show_GWDimList();
	~GWDimList();
	int Show();
	void RegisterWithMenu();

	//----------------------- BlockStyler Callback Prototypes ---------------------
	// The following member function prototypes define the callbacks 
	// specified in your BlockStyler dialog.  The empty implementation
	// of these prototypes is provided in the GWDimList.cpp file. 
	// You are REQUIRED to write the implementation for these functions.
	//------------------------------------------------------------------------------
    void initialize_cb();
    void dialogShown_cb();
	int apply_cb();
	int ok_cb();
	int cancel_cb();
    int update_cb(NXOpen::BlockStyler::UIBlock* block);
    int filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject);
    void focusNotify_cb(NXOpen::BlockStyler::UIBlock* block, bool focus);
    void keyboardFocusNotify_cb(NXOpen::BlockStyler::UIBlock* block, bool focus);
    PropertyList* GetBlockProperties(const char *blockID);

	//void OnExpandCallback (NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node);
	//void OnInsertColumnCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);
	//void OnInsertNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node);
	//void OnDeleteNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node);
	//void OnPreSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int ID, bool selected);
	void OnSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *, int columnID, bool selected);
	//void OnStateChangeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state);
	//NXString ToolTipTextCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);
	//int ColumnSortCallback(NXOpen::BlockStyler::Tree *tree, int columnID, NXOpen::BlockStyler::Node *node1, NXOpen::BlockStyler::Node *node2);
	NXString StateIconNameCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state);
	//NXOpen::BlockStyler::Tree::BeginLabelEditState OnBeginLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);
	//NXOpen::BlockStyler::Tree::EndLabelEditState OnEndLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int, NXString editedText);
	NXOpen::BlockStyler::Tree::EditControlOption OnEditOptionSelectedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, int selectedOptionID, NXString selectedOptionText, NXOpen::BlockStyler::Tree::ControlType type);
	NXOpen::BlockStyler::Tree::ControlType AskEditControlCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);
	void OnMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID );
	void OnMenuSelectionCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int menuItemID);
	//NXOpen::BlockStyler::Node::DropType IsDropAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID);
	//NXOpen::BlockStyler::Node::DragType IsDragAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);
	//bool OnDropCallback(NXOpen::BlockStyler::Tree *tree, std::vector<NXOpen::BlockStyler::Node *> node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID, NXOpen::BlockStyler::Node::DropType dropType, int dropMenuItemId);
	//void OnDropMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID);
	//void OnDefaultAction(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID);

	void InitializePmiTreeList();
	void InsertViewNode(NXOpen::ModelingView *modelingView);
	void AddPmiToViewNode(BlockStyler::Node *viewNode, Annotations::Annotation *pmiAnnotation);
	NXString GWDimList::AskPmiTreeName(Annotations::Annotation *pmiAnnotation);
	void CleanupDimTreeList();
	BlockStyler::Node* GetPmiNode(const Annotations::Annotation *pmiAnnotation);
	Annotations::Annotation* GetPmiAnnotation(const BlockStyler::Node *pmiNode);
	static void InitializePmiAnnotationVector();
	static void UpdatePmiDataVector();
	void SelectCurrentAnnotation();
	Part* CreateAssociatePart(char *part_number, const Annotations::Annotation *pmiAnnotation);
	static bool InitializeColumnDatas(const char *config_file);
	static bool InitializeDialogDefaults(const char *config_file);
	void RemoveUnusedComponents();
	void CleanupItemTexts(BlockStyler::Node *pmiNode);
	bool IsEmptyItemTexts(BlockStyler::Node *pmiNode);
	static Annotations::Annotation *currentAnnotation;
	static std::vector<COLUMNDATA> colunmDataVector;
	static std::vector<Annotations::Annotation *> pmiAnnotationVector;
	static std::vector<std::string> ugmgrFolderPath;
	static std::vector<ITEMDATA> itemDataVector;
	static int pmiTextColumn;
	static std::string strPartType;
	static bool saveData;
private:
	const char* theDlxFileName;
	NXOpen::BlockStyler::BlockDialog* theDialog;
	NXOpen::BlockStyler::Group* groupSelect;// Block type: Group
	NXOpen::BlockStyler::Enumeration* viewRadio;// Block type: Enumeration
	NXOpen::BlockStyler::SelectObject* pmiSelection;// Block type: Selection
	NXOpen::BlockStyler::Group* groupList;// Block type: Group
	NXOpen::BlockStyler::Label* labelTitle;// Block type: Label
	NXOpen::BlockStyler::Tree* pmiTree;// Block type: Tree Control

	NXOpen::NXString oldItemText;
	bool isModified;
};
#endif //GWDIMLIST_H_INCLUDED
